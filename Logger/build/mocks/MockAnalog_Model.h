/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKANALOG_MODEL_H
#define _MOCKANALOG_MODEL_H

#include "unity.h"
#include "stdint.h"
#include "Defs.h"
#include "LPC1768.h"
#include "Analog_Model.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockAnalog_Model_Init(void);
void MockAnalog_Model_Destroy(void);
void MockAnalog_Model_Verify(void);




#define AnalogModel_Init_Ignore() AnalogModel_Init_CMockIgnore()
void AnalogModel_Init_CMockIgnore(void);
#define AnalogModel_Init_StopIgnore() AnalogModel_Init_CMockStopIgnore()
void AnalogModel_Init_CMockStopIgnore(void);
#define AnalogModel_Init_Expect() AnalogModel_Init_CMockExpect(__LINE__)
void AnalogModel_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define AnalogModel_GetChannel_IgnoreAndReturn(cmock_retval) AnalogModel_GetChannel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void AnalogModel_GetChannel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define AnalogModel_GetChannel_StopIgnore() AnalogModel_GetChannel_CMockStopIgnore()
void AnalogModel_GetChannel_CMockStopIgnore(void);
#define AnalogModel_GetChannel_ExpectAnyArgsAndReturn(cmock_retval) AnalogModel_GetChannel_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void AnalogModel_GetChannel_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define AnalogModel_GetChannel_ExpectAndReturn(channel, cmock_retval) AnalogModel_GetChannel_CMockExpectAndReturn(__LINE__, channel, cmock_retval)
void AnalogModel_GetChannel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t channel, uint16_t cmock_to_return);
#define AnalogModel_GetChannel_IgnoreArg_channel() AnalogModel_GetChannel_CMockIgnoreArg_channel(__LINE__)
void AnalogModel_GetChannel_CMockIgnoreArg_channel(UNITY_LINE_TYPE cmock_line);
#define AnalogModel_AddReading_Ignore() AnalogModel_AddReading_CMockIgnore()
void AnalogModel_AddReading_CMockIgnore(void);
#define AnalogModel_AddReading_StopIgnore() AnalogModel_AddReading_CMockStopIgnore()
void AnalogModel_AddReading_CMockStopIgnore(void);
#define AnalogModel_AddReading_ExpectAnyArgs() AnalogModel_AddReading_CMockExpectAnyArgs(__LINE__)
void AnalogModel_AddReading_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define AnalogModel_AddReading_Expect(Channel, Reading) AnalogModel_AddReading_CMockExpect(__LINE__, Channel, Reading)
void AnalogModel_AddReading_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t Channel, uint16_t Reading);
#define AnalogModel_AddReading_IgnoreArg_Channel() AnalogModel_AddReading_CMockIgnoreArg_Channel(__LINE__)
void AnalogModel_AddReading_CMockIgnoreArg_Channel(UNITY_LINE_TYPE cmock_line);
#define AnalogModel_AddReading_IgnoreArg_Reading() AnalogModel_AddReading_CMockIgnoreArg_Reading(__LINE__)
void AnalogModel_AddReading_CMockIgnoreArg_Reading(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
