/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKANALOG_HARDWARE_H
#define _MOCKANALOG_HARDWARE_H

#include "unity.h"
#include "stdint.h"
#include "Defs.h"
#include "LPC1768.h"
#include "Analog_Hardware.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockAnalog_Hardware_Init(void);
void MockAnalog_Hardware_Destroy(void);
void MockAnalog_Hardware_Verify(void);




#define AnalogHardware_Init_Ignore() AnalogHardware_Init_CMockIgnore()
void AnalogHardware_Init_CMockIgnore(void);
#define AnalogHardware_Init_StopIgnore() AnalogHardware_Init_CMockStopIgnore()
void AnalogHardware_Init_CMockStopIgnore(void);
#define AnalogHardware_Init_Expect() AnalogHardware_Init_CMockExpect(__LINE__)
void AnalogHardware_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define AnalogHardware_IsReady_IgnoreAndReturn(cmock_retval) AnalogHardware_IsReady_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void AnalogHardware_IsReady_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define AnalogHardware_IsReady_StopIgnore() AnalogHardware_IsReady_CMockStopIgnore()
void AnalogHardware_IsReady_CMockStopIgnore(void);
#define AnalogHardware_IsReady_ExpectAnyArgsAndReturn(cmock_retval) AnalogHardware_IsReady_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void AnalogHardware_IsReady_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define AnalogHardware_IsReady_ExpectAndReturn(Channel, cmock_retval) AnalogHardware_IsReady_CMockExpectAndReturn(__LINE__, Channel, cmock_retval)
void AnalogHardware_IsReady_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t Channel, STATUS_T cmock_to_return);
#define AnalogHardware_IsReady_IgnoreArg_Channel() AnalogHardware_IsReady_CMockIgnoreArg_Channel(__LINE__)
void AnalogHardware_IsReady_CMockIgnoreArg_Channel(UNITY_LINE_TYPE cmock_line);
#define AnalogHardware_GetReading_IgnoreAndReturn(cmock_retval) AnalogHardware_GetReading_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void AnalogHardware_GetReading_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define AnalogHardware_GetReading_StopIgnore() AnalogHardware_GetReading_CMockStopIgnore()
void AnalogHardware_GetReading_CMockStopIgnore(void);
#define AnalogHardware_GetReading_ExpectAnyArgsAndReturn(cmock_retval) AnalogHardware_GetReading_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void AnalogHardware_GetReading_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define AnalogHardware_GetReading_ExpectAndReturn(Channel, cmock_retval) AnalogHardware_GetReading_CMockExpectAndReturn(__LINE__, Channel, cmock_retval)
void AnalogHardware_GetReading_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t Channel, uint16_t cmock_to_return);
#define AnalogHardware_GetReading_IgnoreArg_Channel() AnalogHardware_GetReading_CMockIgnoreArg_Channel(__LINE__)
void AnalogHardware_GetReading_CMockIgnoreArg_Channel(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
