/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCOMMANDHARDWARE_H
#define _MOCKCOMMANDHARDWARE_H

#include "unity.h"
#include "stdint.h"
#include "Defs.h"
#include "LPC1768.h"
#include "CommandHardware.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockCommandHardware_Init(void);
void MockCommandHardware_Destroy(void);
void MockCommandHardware_Verify(void);




#define CommandHardware_Init_Ignore() CommandHardware_Init_CMockIgnore()
void CommandHardware_Init_CMockIgnore(void);
#define CommandHardware_Init_StopIgnore() CommandHardware_Init_CMockStopIgnore()
void CommandHardware_Init_CMockStopIgnore(void);
#define CommandHardware_Init_Expect() CommandHardware_Init_CMockExpect(__LINE__)
void CommandHardware_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define CommandHardware_Exec_Ignore() CommandHardware_Exec_CMockIgnore()
void CommandHardware_Exec_CMockIgnore(void);
#define CommandHardware_Exec_StopIgnore() CommandHardware_Exec_CMockStopIgnore()
void CommandHardware_Exec_CMockStopIgnore(void);
#define CommandHardware_Exec_Expect() CommandHardware_Exec_CMockExpect(__LINE__)
void CommandHardware_Exec_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define CommandHardware_CheckForMsg_IgnoreAndReturn(cmock_retval) CommandHardware_CheckForMsg_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void CommandHardware_CheckForMsg_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define CommandHardware_CheckForMsg_StopIgnore() CommandHardware_CheckForMsg_CMockStopIgnore()
void CommandHardware_CheckForMsg_CMockStopIgnore(void);
#define CommandHardware_CheckForMsg_ExpectAnyArgsAndReturn(cmock_retval) CommandHardware_CheckForMsg_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void CommandHardware_CheckForMsg_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define CommandHardware_CheckForMsg_ExpectAndReturn(msg, cmock_retval) CommandHardware_CheckForMsg_CMockExpectAndReturn(__LINE__, msg, cmock_retval)
void CommandHardware_CheckForMsg_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, STATUS_T cmock_to_return);
#define CommandHardware_CheckForMsg_ExpectWithArrayAndReturn(msg, msg_Depth, cmock_retval) CommandHardware_CheckForMsg_CMockExpectWithArrayAndReturn(__LINE__, msg, msg_Depth, cmock_retval)
void CommandHardware_CheckForMsg_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, int msg_Depth, STATUS_T cmock_to_return);
#define CommandHardware_CheckForMsg_ReturnThruPtr_msg(msg) CommandHardware_CheckForMsg_CMockReturnMemThruPtr_msg(__LINE__, msg, sizeof(MESSAGE_T))
#define CommandHardware_CheckForMsg_ReturnArrayThruPtr_msg(msg, cmock_len) CommandHardware_CheckForMsg_CMockReturnMemThruPtr_msg(__LINE__, msg, (int)(cmock_len * (int)sizeof(*msg)))
#define CommandHardware_CheckForMsg_ReturnMemThruPtr_msg(msg, cmock_size) CommandHardware_CheckForMsg_CMockReturnMemThruPtr_msg(__LINE__, msg, cmock_size)
void CommandHardware_CheckForMsg_CMockReturnMemThruPtr_msg(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, int cmock_size);
#define CommandHardware_SendResponse_IgnoreAndReturn(cmock_retval) CommandHardware_SendResponse_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void CommandHardware_SendResponse_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define CommandHardware_SendResponse_StopIgnore() CommandHardware_SendResponse_CMockStopIgnore()
void CommandHardware_SendResponse_CMockStopIgnore(void);
#define CommandHardware_SendResponse_ExpectAnyArgsAndReturn(cmock_retval) CommandHardware_SendResponse_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void CommandHardware_SendResponse_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define CommandHardware_SendResponse_ExpectAndReturn(msg, cmock_retval) CommandHardware_SendResponse_CMockExpectAndReturn(__LINE__, msg, cmock_retval)
void CommandHardware_SendResponse_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, STATUS_T cmock_to_return);
#define CommandHardware_SendResponse_ExpectWithArrayAndReturn(msg, msg_Depth, cmock_retval) CommandHardware_SendResponse_CMockExpectWithArrayAndReturn(__LINE__, msg, msg_Depth, cmock_retval)
void CommandHardware_SendResponse_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, int msg_Depth, STATUS_T cmock_to_return);
#define CommandHardware_SendResponse_ReturnThruPtr_msg(msg) CommandHardware_SendResponse_CMockReturnMemThruPtr_msg(__LINE__, msg, sizeof(MESSAGE_T))
#define CommandHardware_SendResponse_ReturnArrayThruPtr_msg(msg, cmock_len) CommandHardware_SendResponse_CMockReturnMemThruPtr_msg(__LINE__, msg, (int)(cmock_len * (int)sizeof(*msg)))
#define CommandHardware_SendResponse_ReturnMemThruPtr_msg(msg, cmock_size) CommandHardware_SendResponse_CMockReturnMemThruPtr_msg(__LINE__, msg, cmock_size)
void CommandHardware_SendResponse_CMockReturnMemThruPtr_msg(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, int cmock_size);
#define CommandHardware_SendError_IgnoreAndReturn(cmock_retval) CommandHardware_SendError_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void CommandHardware_SendError_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define CommandHardware_SendError_StopIgnore() CommandHardware_SendError_CMockStopIgnore()
void CommandHardware_SendError_CMockStopIgnore(void);
#define CommandHardware_SendError_ExpectAnyArgsAndReturn(cmock_retval) CommandHardware_SendError_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void CommandHardware_SendError_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define CommandHardware_SendError_ExpectAndReturn(msg, Error, cmock_retval) CommandHardware_SendError_CMockExpectAndReturn(__LINE__, msg, Error, cmock_retval)
void CommandHardware_SendError_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, STATUS_T Error, STATUS_T cmock_to_return);
#define CommandHardware_SendError_ExpectWithArrayAndReturn(msg, msg_Depth, Error, cmock_retval) CommandHardware_SendError_CMockExpectWithArrayAndReturn(__LINE__, msg, msg_Depth, Error, cmock_retval)
void CommandHardware_SendError_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, int msg_Depth, STATUS_T Error, STATUS_T cmock_to_return);
#define CommandHardware_SendError_ReturnThruPtr_msg(msg) CommandHardware_SendError_CMockReturnMemThruPtr_msg(__LINE__, msg, sizeof(MESSAGE_T))
#define CommandHardware_SendError_ReturnArrayThruPtr_msg(msg, cmock_len) CommandHardware_SendError_CMockReturnMemThruPtr_msg(__LINE__, msg, (int)(cmock_len * (int)sizeof(*msg)))
#define CommandHardware_SendError_ReturnMemThruPtr_msg(msg, cmock_size) CommandHardware_SendError_CMockReturnMemThruPtr_msg(__LINE__, msg, cmock_size)
void CommandHardware_SendError_CMockReturnMemThruPtr_msg(UNITY_LINE_TYPE cmock_line, MESSAGE_T* msg, int cmock_size);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
