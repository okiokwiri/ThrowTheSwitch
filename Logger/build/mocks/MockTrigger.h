/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKTRIGGER_H
#define _MOCKTRIGGER_H

#include "unity.h"
#include "stdint.h"
#include "Defs.h"
#include "LPC1768.h"
#include "Trigger.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void MockTrigger_Init(void);
void MockTrigger_Destroy(void);
void MockTrigger_Verify(void);




#define Trigger_Init_Ignore() Trigger_Init_CMockIgnore()
void Trigger_Init_CMockIgnore(void);
#define Trigger_Init_StopIgnore() Trigger_Init_CMockStopIgnore()
void Trigger_Init_CMockStopIgnore(void);
#define Trigger_Init_Expect() Trigger_Init_CMockExpect(__LINE__)
void Trigger_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define Trigger_GetStyle_IgnoreAndReturn(cmock_retval) Trigger_GetStyle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Trigger_GetStyle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TRIGGER_T cmock_to_return);
#define Trigger_GetStyle_StopIgnore() Trigger_GetStyle_CMockStopIgnore()
void Trigger_GetStyle_CMockStopIgnore(void);
#define Trigger_GetStyle_ExpectAndReturn(cmock_retval) Trigger_GetStyle_CMockExpectAndReturn(__LINE__, cmock_retval)
void Trigger_GetStyle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TRIGGER_T cmock_to_return);
#define Trigger_OnBitChange_IgnoreAndReturn(cmock_retval) Trigger_OnBitChange_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Trigger_OnBitChange_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnBitChange_StopIgnore() Trigger_OnBitChange_CMockStopIgnore()
void Trigger_OnBitChange_CMockStopIgnore(void);
#define Trigger_OnBitChange_ExpectAnyArgsAndReturn(cmock_retval) Trigger_OnBitChange_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void Trigger_OnBitChange_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnBitChange_ExpectAndReturn(MaskToCheck, cmock_retval) Trigger_OnBitChange_CMockExpectAndReturn(__LINE__, MaskToCheck, cmock_retval)
void Trigger_OnBitChange_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t MaskToCheck, STATUS_T cmock_to_return);
#define Trigger_OnBitChange_IgnoreArg_MaskToCheck() Trigger_OnBitChange_CMockIgnoreArg_MaskToCheck(__LINE__)
void Trigger_OnBitChange_CMockIgnoreArg_MaskToCheck(UNITY_LINE_TYPE cmock_line);
#define Trigger_OnBitState_IgnoreAndReturn(cmock_retval) Trigger_OnBitState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Trigger_OnBitState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnBitState_StopIgnore() Trigger_OnBitState_CMockStopIgnore()
void Trigger_OnBitState_CMockStopIgnore(void);
#define Trigger_OnBitState_ExpectAnyArgsAndReturn(cmock_retval) Trigger_OnBitState_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void Trigger_OnBitState_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnBitState_ExpectAndReturn(MaskToCheck, MaskState, cmock_retval) Trigger_OnBitState_CMockExpectAndReturn(__LINE__, MaskToCheck, MaskState, cmock_retval)
void Trigger_OnBitState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t MaskToCheck, uint8_t MaskState, STATUS_T cmock_to_return);
#define Trigger_OnBitState_IgnoreArg_MaskToCheck() Trigger_OnBitState_CMockIgnoreArg_MaskToCheck(__LINE__)
void Trigger_OnBitState_CMockIgnoreArg_MaskToCheck(UNITY_LINE_TYPE cmock_line);
#define Trigger_OnBitState_IgnoreArg_MaskState() Trigger_OnBitState_CMockIgnoreArg_MaskState(__LINE__)
void Trigger_OnBitState_CMockIgnoreArg_MaskState(UNITY_LINE_TYPE cmock_line);
#define Trigger_OnSequence_IgnoreAndReturn(cmock_retval) Trigger_OnSequence_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Trigger_OnSequence_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnSequence_StopIgnore() Trigger_OnSequence_CMockStopIgnore()
void Trigger_OnSequence_CMockStopIgnore(void);
#define Trigger_OnSequence_ExpectAnyArgsAndReturn(cmock_retval) Trigger_OnSequence_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void Trigger_OnSequence_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnSequence_ExpectAndReturn(MaskToCheck, MaskStates, Len, cmock_retval) Trigger_OnSequence_CMockExpectAndReturn(__LINE__, MaskToCheck, MaskStates, Len, cmock_retval)
void Trigger_OnSequence_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t MaskToCheck, uint8_t* MaskStates, uint8_t Len, STATUS_T cmock_to_return);
#define Trigger_OnSequence_ExpectWithArrayAndReturn(MaskToCheck, MaskStates, MaskStates_Depth, Len, cmock_retval) Trigger_OnSequence_CMockExpectWithArrayAndReturn(__LINE__, MaskToCheck, MaskStates, MaskStates_Depth, Len, cmock_retval)
void Trigger_OnSequence_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t MaskToCheck, uint8_t* MaskStates, int MaskStates_Depth, uint8_t Len, STATUS_T cmock_to_return);
#define Trigger_OnSequence_ReturnThruPtr_MaskStates(MaskStates) Trigger_OnSequence_CMockReturnMemThruPtr_MaskStates(__LINE__, MaskStates, sizeof(uint8_t))
#define Trigger_OnSequence_ReturnArrayThruPtr_MaskStates(MaskStates, cmock_len) Trigger_OnSequence_CMockReturnMemThruPtr_MaskStates(__LINE__, MaskStates, (int)(cmock_len * (int)sizeof(*MaskStates)))
#define Trigger_OnSequence_ReturnMemThruPtr_MaskStates(MaskStates, cmock_size) Trigger_OnSequence_CMockReturnMemThruPtr_MaskStates(__LINE__, MaskStates, cmock_size)
void Trigger_OnSequence_CMockReturnMemThruPtr_MaskStates(UNITY_LINE_TYPE cmock_line, uint8_t* MaskStates, int cmock_size);
#define Trigger_OnSequence_IgnoreArg_MaskToCheck() Trigger_OnSequence_CMockIgnoreArg_MaskToCheck(__LINE__)
void Trigger_OnSequence_CMockIgnoreArg_MaskToCheck(UNITY_LINE_TYPE cmock_line);
#define Trigger_OnSequence_IgnoreArg_MaskStates() Trigger_OnSequence_CMockIgnoreArg_MaskStates(__LINE__)
void Trigger_OnSequence_CMockIgnoreArg_MaskStates(UNITY_LINE_TYPE cmock_line);
#define Trigger_OnSequence_IgnoreArg_Len() Trigger_OnSequence_CMockIgnoreArg_Len(__LINE__)
void Trigger_OnSequence_CMockIgnoreArg_Len(UNITY_LINE_TYPE cmock_line);
#define Trigger_Now_IgnoreAndReturn(cmock_retval) Trigger_Now_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Trigger_Now_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_Now_StopIgnore() Trigger_Now_CMockStopIgnore()
void Trigger_Now_CMockStopIgnore(void);
#define Trigger_Now_ExpectAndReturn(cmock_retval) Trigger_Now_CMockExpectAndReturn(__LINE__, cmock_retval)
void Trigger_Now_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnTimeStamp_IgnoreAndReturn(cmock_retval) Trigger_OnTimeStamp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Trigger_OnTimeStamp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnTimeStamp_StopIgnore() Trigger_OnTimeStamp_CMockStopIgnore()
void Trigger_OnTimeStamp_CMockStopIgnore(void);
#define Trigger_OnTimeStamp_ExpectAnyArgsAndReturn(cmock_retval) Trigger_OnTimeStamp_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void Trigger_OnTimeStamp_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, STATUS_T cmock_to_return);
#define Trigger_OnTimeStamp_ExpectAndReturn(Timestamp, cmock_retval) Trigger_OnTimeStamp_CMockExpectAndReturn(__LINE__, Timestamp, cmock_retval)
void Trigger_OnTimeStamp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t Timestamp, STATUS_T cmock_to_return);
#define Trigger_OnTimeStamp_IgnoreArg_Timestamp() Trigger_OnTimeStamp_CMockIgnoreArg_Timestamp(__LINE__)
void Trigger_OnTimeStamp_CMockIgnoreArg_Timestamp(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
